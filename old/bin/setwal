#!/usr/bin/env bash

check() {
	command -v "$1" 1>/dev/null
}

# Variables
_wallpath="$HOME/Pictures/wallpapers/"
rootmgr="sudo"
check doas && rootmgr="doas"
_cmd="wbg"
check swww && _cmd="swwwFn"
skip=false
green="\033[0;32m"
nocolor="\033[0m"

# shellcheck disable=SC2015
notify() {
	check notify-send && {
		setsid notify-send \
			--hint=string:x-dunst-stack-tag:wallpaper \
			--hint=string:synchronous:wallpaper \
			"$@" &>/dev/null
	} || {
		echo "$@"
	}
}

ok() {
	echo -e "[$green  $nocolor] $*"
}

err() {
	echo -e "[$green  $nocolor] $*"
}

# shellcheck disable=SC2120
loading() {
	pid=$! # Process Id of the previous running command
	spin[0]="-"
	spin[1]="\\"
	spin[2]="|"
	spin[3]="/"

	echo -n "$1${spin[0]}"
	while kill -0 $pid 2>/dev/null; do
		for i in "${spin[@]}"; do
			echo -ne "\b$i"
			sleep 0.1
		done
	done
	echo -ne "\b"
}

swwwFn() {
	export SWWW_TRANSITION_FPS=60
	export SWWW_TRANSITION_STEP=5
  export SWWW_TRANSITION_TYPE=random
	swww init &>/dev/null
	swww img "$1"
}

getimg() {
	ipath="$(realpath "$1" 2>/dev/null)"
	file "$ipath" | grep -qE 'image|bitmap' && {
		echo "$ipath"
		return
	}
	IFS=$'\n'$'\r'
	wallpath="${WALLPATH:-$_wallpath}"
	mapfile arr < <(find "$wallpath" -type f \( -iname '*.PNG' -o -iname '*.JPG' -o -iname '*.JPEG' \))
	realpath "${arr[RANDOM % ${#arr[@]}]}"
}

help() {
	cat <<-EOF
		This is setwal script by niksingh710.

		ARGS:
		  -s, --skip : Skips all extra steps and sets only the wallpaper.
		  -t, --tool : Prints the tool binary name to be used to set wallpaper.
		  -w, --wallpaper : Takes path to set as wallpaper 
		                        if invalid image then chooses a random image.
		  -tf, --toolforce : Forces the tool to be used to set wal
	EOF
}

tool() {
	echo "$_cmd" is going to be used
	exit
}

# Extra fns

oomox() {
	notify -i "$_path" "Creating Gtk Theme OOMOX" -t 0
	check sassc || {
		notify "OOMOX: sassc not installed"
		return 1
	}
	check bc || {
		notify "OOMOX: bc not installed"
		return 1
	}

	# shellcheck disable=SC2015
	[ -f "$HOME/work/oomox-gtk-theme/change_color.sh" ] && {
		"$HOME"/work/oomox-gtk-theme/change_color.sh \
			-o oomox-gtk-nik-theme \
			<(/usr/bin/cat "$HOME/.config/wpg/templates/oomox")
	} || {
		echo "Dir is not cloned in $HOME/work"
	}
	notify -i "$_path" "OMOX Generated" -t 0
}

ifffox() {
	check fd || return
	loc=$(fd -tf "^bg$" "$HOME/.mozilla")
	/usr/bin/cp "$_path" "$loc"
}

ifsddm() {
	[ -d /usr/share/sddm/themes/sugar-candy/Backgrounds ] && {
		$rootmgr /usr/bin/cp "$_path" /usr/share/sddm/themes/sugar-candy/Backgrounds/bg.jpg
	}
}

extra() {
	check pywalfox && pywalfox update
	check wal-telegram && wal-telegram --wal -r -g
	check pywal-discord && pywal-discord
	check mako && makoctl reload
	check pywal-discord && pywal-discord
	check xrdb && xrdb ~/.Xresources
	[ -d "$HOME/.steam/steam/skins/" ] && {
		pgrep -x steam &>/dev/null && killall steam
		check wal_steam && wal_steam -g -s "$HOME"/.steam/steam/skins/
	}
	check waybar && {
		killall -q waybar
		waybar &>/dev/null &
		disown
	}
  check mailspring && {
    killall -q mailspring
    mailspring --background &>/dev/null &
    disown
  }
	# check hyprctl && hyprctl reload
	ifsddm
	ifffox
}

gradienceTheme() {
	check gradience-cli || {
		err "Gradience Cli not present"
		return 1
	}

	notify "Monet Colorscheme... " "Make sure to re run gtk apps to se effect" -i "$_path" -t 0
	gradience-cli monet -p "$_path" -n wal --theme dark --tone 100
	gradience-cli apply -n wal --gtk both
}

wpg-settings() {
	# oomox &>/dev/null & # also generates or qt
	# shellcheck disable=SC2015
	# loading && ok "Generated Oomox theme for qt and gtk" || err "Oomox Faced an err."
	extra &>/dev/null &
	# shellcheck disable=SC2015
	loading && ok "Extra All went Fine" || err "Extra Failed..."
}

wpgFn() {
	check wpg || return
	notify "Generating Colorscheme... " -i "$_path" -t 0
	killall -q wpg
	wpg -ns "$_path"
	notify "Generated Colorscheme" -i "$_path" -t 0
}

getArgs() {
	while [ "$#" -gt 0 ]; do
		case "$1" in
		-s | --skip)
			skip=true
			;;
		-t | --tool)
			tool
			;;
		-tf | --toolforce)
			_cmd="$2"
			shift
			;;
		-w | --wallpaper)
			_path="$(getimg "$2")"
			shift
			;;
		-h | --help)
			help
			exit
			;;
		*)
			help
			echo ""
			echo "Wrong argument given"
			exit 1
			;;
		esac
		shift
	done
}

# echo "Welcome!! setting wallpaper"
[ $# -eq 0 ] || getArgs "$@"

[ -z "$_path" ] && _path="$(getimg)"
$_cmd "$_path" && {
	notify "Image setted successfully" -i "$_path"
	ln -sf "$_path" ~/.wallpaper
}
$skip && exit 0

# Holding gradience till tone comes in and fixed border for linea so good to me
# gradienceTheme &>/dev/null & # also generates or qt
# shellcheck disable=SC2015
# loading && ok "Generated Monet theme for gtk" || err "Gradience Faced an err."

wpgFn &>/dev/null &
# shellcheck disable=SC2015
loading && {
	ok "Generated Colorschemes Using wpg"
	wpg-settings
	notify "Setted all Extra Stuff" "Whole system Refactored" -i "$_path"
} || err "Wpg Faced Error"
